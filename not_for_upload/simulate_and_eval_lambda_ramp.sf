import os, re, yaml
# sys.path.append(workflow.basedir)
# from helper_functions import parse_input_path

#' Run FRETboard on pre-labeled data and evaluate result
# Arguments:
# - in_dir:			Input directory, containing dirs 'dats_labeled' and 'dats_unlabeled'
# - out_dir: 		Output directory
# - algos:			comma-separated list of algorithms to run. May be one or more of file names in `algo_configs` folder, without .yml extension.
#

# Check arguments
for arg in ('in_dir', 'out_dir', 'algo'):
	if arg not in config: raise ValueError(f'Missing required config argument: {arg} ')

# Parse arguments
in_dir = os.path.abspath(config['in_dir']) + '/'
basedir = os.path.basename(in_dir)
if 'params.txt' not in os.listdir(in_dir): raise ValueError(f'Add a params file in in_dir!')

out_dir = os.path.abspath(config['out_dir']) + '/'

algo=config['algo']

lambda_list = [0.5, 0.75, 0.9, 0.95, 0.99, 1.0]
lambda_list_str = [f'lambda{"{:.2f}".format(l)}' for l in lambda_list]

rule target:
	input:
		mod_struct_svg=f'{out_dir}ramp_accuracy.svg'

rule simulate_fb:
	input:
		in_dir=f'{in_dir}'
	output:
		sim_dir=directory(f'{out_dir}{{dir_name}}')
	shell:
		'''
		lambda=$(echo {wildcards.dir_name} | grep -Po '(?<=lambda)[0-9.]+')
		source {input.in_dir}/params.txt
		mkdir {output.sim_dir}
		python {workflow.basedir}/simulate_classification.py \
				--nb-states $nb_states \
				--in-dats {input.in_dir}/dats_unlabeled \
				--params-file "{workflow.basedir}/algo_configs/{algo}.yml" \
				--label-dats {input.in_dir}/dats_labeled \
				--nb-manual 5 \
				--out-dir {output.sim_dir} \
				--supervision-influence $lambda
		'''

rule eval_fb:
	input:
		fb_dir=expand(f'{out_dir}{{l}}', l=lambda_list_str)
	params:
		fb_dir=out_dir
	output:
		svg=f'{out_dir}ramp_accuracy.svg'
	shell:
		'''
		source {in_dir}/params.txt
		target_states=
		for i in $(seq 2 $nb_states); do target_states="${{target_states}} ${{i}}"; done
		
		python {workflow.basedir}/evaluate_manual_ramp.py \
			--fb {params.fb_dir} \
			--manual {in_dir}dats_labeled \
			--manual-type fretboard \
			--target-states  $(echo "${{target_states}}") \
			--categories lambda \
			--svg {output.svg} \
			--type-ramp lambda
		'''
