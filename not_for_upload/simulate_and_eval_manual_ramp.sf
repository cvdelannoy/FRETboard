import os, re, yaml
# sys.path.append(workflow.basedir)
# from helper_functions import parse_input_path

#' Run FRETboard on pre-labeled data and evaluate result
# Arguments:
# - in_dir:			Input directory, containing 1 dir per data set, which contains dirs 'dats_labeled' and 'dats_unlabeled'
# - out_dir: 		Output directory
# - algos:			comma-separated list of algorithms to run. May be one or more of file names in `algo_configs` folder, without .yml extension.
#

# Check arguments
for arg in ('in_dir', 'out_dir', 'algo'):
	if arg not in config: raise ValueError(f'Missing required config argument: {arg} ')

# Parse arguments
in_dir = os.path.abspath(config['in_dir']) + '/'
dir_list = [in_dir + dr for dr in list(os.walk(in_dir))[0][1]]
basedir_list = [re.search('[^/]+$', dn).group(0) for dn in dir_list]
params_dict = {}
for bdn, dn in zip(basedir_list, dir_list):
	if 'params.txt' not in os.listdir(dn): raise ValueError(f'Add a params file in every dir! Missing in {dn}')

out_dir = os.path.abspath(config['out_dir']) + '/'
eval_dir_list = [f'{out_dir}/{bd}_eval/' for bd in basedir_list]

algo=config['algo']

rule target:
	input:
		mod_struct_svg=f'{out_dir}ramp_accuracy.svg'

rule simulate_fb:
	input:
		in_dir=f'{in_dir}{{dir_name}}'
	params:
		fb_path=workflow.basedir
	output:
		sim_dir=directory(f'{out_dir}{{dir_name}}')
	shell:
		''' 
		source {input.in_dir}/params.txt
		mkdir {output.sim_dir}
		python {workflow.basedir}/simulate_classification.py \
				--nb-states $nb_states \
				--in-dats {input.in_dir}/dats_unlabeled \
				--params-file "{workflow.basedir}/algo_configs/{algo}.yml" \
				--label-dats {input.in_dir}/dats_labeled \
				--nb-manual 10 \
				--out-dir {output.sim_dir} \
				--store-intermediates
		'''

rule eval_fb:
	input:
		dat_dir=expand(f'{in_dir}{{bd}}', bd=basedir_list),
		fb_dir=expand(f'{out_dir}{{bd}}', bd=basedir_list)
	params:
		fb_path=workflow.basedir,
		fb_dir=f'{out_dir}',
		categories=basedir_list
	output:
		svg=f'{out_dir}ramp_accuracy.svg'
	shell:
		'''
		source {input.dat_dir}/params.txt
		# fa=$(echo {algo} | grep -Po '^\S*')
		#  nb_states=$(grep -Po '(?<=nb_states: ).+' "{input.dat_dir}/FRETboard_sim_params_${{fa}}.yml" )
		target_states=
		for i in $(seq 2 $nb_states); do target_states="${{target_states}} ${{i}}"; done
		
		python {workflow.basedir}/evaluate_traces.py \
			--fb {params.fb_dir} \
			--manual {input.dat_dir} \
			--manual-type fretboard \
			--target-states  $(echo "${{target_states}}") \
			--categories {params.categories} \
			--svg {output.svg}
		'''
