import os, re, yaml
# sys.path.append(workflow.basedir)
# from helper_functions import parse_input_path

#' Run FRETboard on pre-labeled data and evaluate result
# Arguments:
# - in_dir:			Input directory, containing 1 dir per data set, which contains dirs 'dats_labeled' and 'dats_unlabeled'
# - out_dir: 		Output directory

# Check arguments
for arg in ('in_dir', 'out_dir'):
	if arg not in config: raise ValueError(f'Missing required config argument: {arg} ')

# Parse arguments
in_dir = os.path.abspath(config['in_dir']) + '/'
dir_list = [in_dir + dr for dr in list(os.walk(in_dir))[0][1]]
basedir_list = sorted([re.search('[^/]+$', dn).group(0) for dn in dir_list])
params_dict = {}
for dn in dir_list:
	if 'params.txt' not in os.listdir(dn): raise ValueError(f'Add a params.txt file in every dir! Missing in {dn}')
	if 'algo_config.yml' not in os.listdir(dn): raise ValueError(f'Add an algo_config.yml in every dir! Missing in {dn}')

out_dir = os.path.abspath(config['out_dir']) + '/'
eval_dir_list = [f'{out_dir}/{bd}_eval/' for bd in basedir_list]

nb_manual = config['nb_manual']

rule target:
	input:
		sim_fig_svg=f'{out_dir}sim_figure.svg'

rule eval_fb:
	input:
		dat_dir=f'{in_dir}{{dir_name}}',
		# fb_dir=f'{out_dir}{{dir_name}}_fb'
		fb_report=f'{out_dir}{{dir_name}}_fb/FRETboard_report.html'
	output:
		eval_dir=directory(f'{out_dir}{{dir_name}}_eval')
	shell:
		'''
		fb_dir="$(dirname {input.fb_report})"
		source {input.dat_dir}/params.txt
		target_states=
		for i in $(seq 1 $nb_states); do target_states="${{target_states}} ${{i}}"; done
		# cats=$( ls "${{fb_dir}}" )
		python {workflow.basedir}/evaluate_traces.py \
			--fb "${{fb_dir}}" \
			--manual {input.dat_dir}/dats_labeled \
			--manual-type fretboard \
			--target-states  $(echo "${{target_states}}") \
			--outdir {output.eval_dir}
		'''

rule simulate_fb:
	input:
		in_dir=f'{in_dir}{{dir_name}}'
	params:
		fb_path=workflow.basedir,
	output:
		out_report=f'{out_dir}{{dir_name}}_fb/FRETboard_report.html',
		sim_dir=directory(f'{out_dir}{{dir_name}}_fb')
	shell:
		'''
		source {input.in_dir}/params.txt
		mkdir -p {output.sim_dir}
		python {workflow.basedir}/simulate_classification.py \
				--nb-states $nb_states \
				--in-dats {input.in_dir}/dats_unlabeled \
				--params-file "{input.in_dir}/algo_config.yml" \
				--label-dats {input.in_dir}/dats_labeled \
				--nb-manual {nb_manual} \
				--out-dir  {output.sim_dir}
		'''

rule generate_sim_figure:
	input:
		eval_dirs=expand(f'{out_dir}{{dir_name}}_eval', dir_name=basedir_list),
		dat_dir=expand(f'{in_dir}{{dir_name}}', dir_name=basedir_list)
	output:
		svg=f'{out_dir}sim_figure.svg'
	shell:
		'''
		# source {input.dat_dir}/params.txt
		# target_states=
		# for i in $(seq 2 $nb_states); do target_states="${{target_states}} ${{i}}"; done
		python {workflow.basedir}/generate_sim_fig.py \
			--eval-dirs {input.eval_dirs} \
			--target-states 1 2 3 4 5 6 7 8 9 10 11 \
			--cat-names {basedir_list} \
			--out-svg {output.svg}
		'''